Microsoft (R) Macro Assembler Version 11.00.50727.1	    11/10/16 21:14:09
main.asm						     Page 1 - 1


				; general comments
				; This version is compatible with Visual Studio 2012 and Visual C++ Express Edition 2012

				; preprocessor directives
				.586
				.MODEL FLAT

				; external files to link with

				; stack configuration
				.STACK 4096

				; named memory allocation and initialization
 00000000			.DATA

					; The value we're converting will be a WORD.
					; When we code the procedure, we will need to push it to the stack as a DWORD.

 00000000 A3BF				valueToConvert WORD 0A3BFh

					; The destination string is 7 bytes long.

 00000002  00000007 [			stringToStoreResult BYTE 7 DUP ("x")
	    78
	   ]

				; procedure code
 00000000			.CODE

 00000000			main	PROC
					
					; load parameters
 00000000  BA 00000000			mov edx, 0
 00000005  66| 8B 15			mov dx, valueToConvert			; valueToConvert is only a WORD, but we only load DWORDs on the stack
	   00000000 R
					
 0000000C  8D 1D 00000002 R		lea ebx, stringToStoreResult	; EBX := address of first element of stringToStoreResult
					
					; push in reverse order

 00000012  53				push ebx	; parameter 2
 00000013  52				push edx	; parameter 1

 00000014  90				nop
					
 00000015  E8 00000009			call splitOctal

 0000001A  90				nop

 0000001B  5A				pop edx		; unload parameter 1
 0000001C  5B				pop ebx		; unload parameter 2
					
 0000001D  B8 00000000			mov eax, 0
 00000022  C3				ret
 00000023			main	ENDP

 00000023			splitOctal PROC

					; offset = 6
					; insert space at offset - 3

					; loop twice ( if offset > -2 )
					;	
					;	get least significant octal digit from valueToConvert
					;	convert to ASCII
					;	store in stringToStoreResult at offset
					;	
					;	get middle significant octal digit from valueToConvert
					;	convert to ASCII
					;	store in stringToStoreResult at offset - 1
					;
					;	get most significant octal digit from valueToConvert
					;	convert to ASCII
					;	store in stringToStoreResults at offset - 2
					;
					;	offset = offset - 4
					;	bit shift right valuteToConvert 8 bits
					; end loop

					; save register state
 00000023  55				push ebp
					
 00000024  8B EC			mov ebp, esp	; ebp is now a reference to the stack at this point

 00000026  9C				pushfd		; save EFLAGS
 00000027  57				push edi
 00000028  50				push eax
 00000029  53				push ebx
 0000002A  52				push edx

					; We have to use a DWORD for the offset because we need to add it to edi

					; edi = &stringToStoreResult	DWORD
					; al = currentDigit				BYTE
					; ebx = offset					DWORD
					; dx = valueToConvert			WORD

 0000002B  8B 7D 0C			mov edi, DWORD PTR [ebp + 12]		; get &stringToStoreResult (parameter 2)

					
 0000002E  BB 00000006			mov ebx, 6							; offset := 6

 00000033  B2 20			mov dl, " "
 00000035  88 54 3B FD			mov BYTE PTR [edi + ebx - 3], dl	; insert space into stringToStoreResult at offset - 3
					
 00000039  8B 55 08			mov edx, DWORD PTR [ebp + 8]		; get valueToConvert (parameter 1)

 0000003C			loopStart:
					
					; we're only going to deal with the lower part of DX (DL).
					; later we will bitshift DX to move DH into DL.
					
 0000003C  8A C2			mov al, dl							; get the current byte to convert


					; given a byte value, eg. 53h = 0111 0011b = 163o
					; the rightmost 3 bytes (011b) represent the last digit of the octal form		(011b = 3o)
					; the 3 bytes left of those (110b) represent the middle digit of the octal form (110b = 6o)
					; and the leftmost two bytes (01b) represent the leftmost byte of the octal form (01b = 1o)
					;
					; to get the rightmost 3 digits, we're masking out the last three bits of the valueToConvert
					; masking out means that I'm pulling out those last three bits - those are the ones I want

 0000003E  24 07			and al, 00000111b				; currentDigit := least significant octal digit

					; to convert currentDigit to ASCII, we will mask in 30h (using bitwise OR). This is equivalent to adding 30h.
					; for instance, to convert 3d to ASCII: 3d = 03h = 0000 0011b
					; ( 03h OR 30h ) = ( 0000 0011b OR 0011 0011b ) = 0011 0011b = 33h = 3 (ASCII)

 00000040  0C 30			or al, 00110000b				; convert currentDigit to ASCII

 00000042  88 04 3B			mov BYTE PTR [edi + ebx], al	; store currentDigit in stringToStoreResult at offset

 00000045  8A C2			mov al, dl						; get the current byte to convert

 00000047  24 38			and al, 00111000b				; currentDigit := middle significant octal digit

					; the current value is masked out, but it's shifted over 3 bits like so:
					; 00111000b
					; it needs to be: 00000111b
					; to do this, we will rotate it right 3 bits.

 00000049  C0 C8 03			ror al, 3						; rotate so that the currentDigit is in the 3 least significant bits

 0000004C  0C 30			or al, 00110000b				; convert currentDigit to ASCII

 0000004E  88 44 3B FF			mov BYTE PTR [edi + ebx - 1], al; store currentDigit in stringToStoreResult at offset - 1

 00000052  8A C2			mov al, dl						; get the current byte to convert

 00000054  24 C0			and al, 11000000b				; currentDigit := most significant octal digit

 00000056  C0 C8 06			ror al, 6						; this time we need to rotate 6 bits to get the result in the 2 least significant bits

 00000059  0C 30			or al, 00110000b				; convert currentDigit to ASCII
					
 0000005B  88 44 3B FE			mov BYTE PTR [edi + ebx - 2], al; store currentDigit in stringToStoreResult at offset - 2

 0000005F  83 EB 04			sub ebx, 4						; offset := offset - 4

 00000062  66| C1 CA 08			ror dx, 8						; rotate valueToConvert so that the most MSB is in the LSB and vice versa

 00000066  83 FB FE			cmp ebx, -2	; ( offset > -2) ?
 00000069  7F D1			jg loopStart					; IF ( offset > -2 ), THEN loop again - we should only loop twice
													; each time offset is decremented by 4, so after two loops it will be -2
					
					; restore register state
 0000006B  5A				pop edx
 0000006C  5B				pop ebx
 0000006D  58				pop eax
 0000006E  5F				pop edi
 0000006F  9D				popfd		; restore EFLAGS
 00000070  5D				pop ebp

 00000071  C3				ret
 00000072			splitOctal ENDP

				END
Microsoft (R) Macro Assembler Version 11.00.50727.1	    11/10/16 21:14:09
main.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000009 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000072 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000023 Public
splitOctal . . . . . . . . . . .	P Near	 00000023 _TEXT	Length= 0000004F Public
  loopStart  . . . . . . . . . .	L Near	 0000003C _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
stringToStoreResult  . . . . . .	Byte	 00000002 _DATA	
valueToConvert . . . . . . . . .	Word	 00000000 _DATA	

	   0 Warnings
	   0 Errors
